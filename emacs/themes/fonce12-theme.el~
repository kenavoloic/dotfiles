;;; fonce12-theme.el --- Theme

;; Copyright (C) 2022 , oim

;; Author: oim
;; Version: 0.1
;; Package-Requires: ((emacs "24"))
;; Created with ThemeCreator, https://github.com/mswift42/themecreator.


;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program. If not, see <http://www.gnu.org/licenses/>.

;; This file is not part of Emacs.

;;; Commentary:

;;; Code:

 (deftheme fonce12)
(let ((class '((class color) (min-colors 89)))

	  	   (noir-1 "#000000")
	   (noir-2 "#1A1A1A")
	   (noir-3 "#333333")
	   (noir-4 "#4D4D4D")
	   (noir-5 "#666666")
	   (noir-6 "#808080")
	   (noir-7 "#999999")
	   (noir-8 "#B3B3B3")

	   (gris-1 "#000000")
	   (gris-2 "#333333")
	   (gris-3 "#666666")
	   (gris-4 "#999999")
	   (gris-5 "#B3B3B3")
	   (gris-6 "#CCCCCC")
	   (gris-7 "#E6E6E6")
	   (gris-8 "#FFFFFF")

	   (bleu "#0000ff")
	   (bleu-1 "#7b68ee")
	   (bleu-2 "#6a5acd")
	   (bleu-3 "#add8e6")
	   (bleu-4 "#b2dfee")
	   (bleu-5 "#4c83ff")
	   (bleu-6 "#96CBFE")
	   (bleu-7 "#00ffff")
	   (bleu-8 "#4F94CD")

	   (jaune-1 "#FFFF00")
	   (jaune-2 "#FFEA00")
	   (jaune-3 "#FFD700")
	   (jaune-4 "#FFC300")
	   (jaune-5 "#FFB100")
	   (jaune-6 "#FF9900")
	   (jaune-7 "#FF8500")
	   (jaune-8 "#FF7200")

	   (rouge-1 "#FF0000")
	   (rouge-2 "#E60000")
	   (rouge-3 "#CC0000")
	   (rouge-4 "#B30000")
	   (rouge-5 "#990000")
	   (rouge-6 "#800000")
	   (rouge-7 "#660000")
	   (rouge-8 "#4C0000")

       (fg1 "#90e137")
       (fg2 "#84cf33")
       (fg3 "#79bd2e")
       (fg4 "#6dab2a")
       (bg1 "#000000")
	   (bg2 "#141414")
       (bgBlock "#4F4F4F")
       (bg3 "#292929")
       (bg4 "#3d3d3d")
       (stabilo "#fefefe")
       (builtin "#fe6d01")
       (keyword "#3790e1")
       (const   "#aaaa00")
       (comment "#9649b9")
       (func    "#f40290")
       (str     "#f8fe0d")
       (type    "#fefee3")
       (var     "#ffadad")
       (warning "#ff2617")
       (warning2 "#ff2323")



      (cyberpunk-fg "#dcdccc")
      (cyberpunk-bg-1 "#2b2b2b")
      (cyberpunk-bg-05 "#383838")
      (cyberpunk-bg "#000000")
      (cyberpunk-bg+1 "#4f4f4f")
      (cyberpunk-bg+2 "#5f5f5f")
      (cyberpunk-bg+3 "#6f6f6f")
      (cyberpunk-red+1 "#dca3a3")
      (cyberpunk-red "#ff0000")
      (cyberpunk-red-1 "#8b0000")
      (cyberpunk-red-2 "#8b0000")
      (cyberpunk-red-3 "#9c6363")
      (cyberpunk-red-4 "#8c5353")
      (cyberpunk-red-5 "#7F073F")
      (cyberpunk-pink "#ff69b4")
      (cyberpunk-pink-1 "#ff1493")
      (cyberpunk-pink-2 "#cd1076")
      (cyberpunk-orange-2 "#FF6400")
      (cyberpunk-orange-1 "#ff8c00") ;; DarkOrange
      (cyberpunk-orange "#ffa500")
      (cyberpunk-yellow "#ffff00")
      (cyberpunk-yellow-1 "#FBDE2D")
      (cyberpunk-yellow-2 "#d0bf8f")
      (cyberpunk-yellow-3 "#D8FA3C")
      (cyberpunk-yellow-4 "#E9C062")
      (cyberpunk-yellow-5 "#ffd700")
      (cyberpunk-green-2 "#006400")
      (cyberpunk-green-1 "#2e8b57")
      (cyberpunk-green "#00ff00")
      (cyberpunk-green+1 "#61CE3C")
      (cyberpunk-green+2 "#9fc59f")
      (cyberpunk-green+3 "#afd8af")
      (cyberpunk-green+4 "#bfebbf")
      (cyberpunk-cyan "#93e0e3")
      (cyberpunk-blue+1 "#94bff3")
      (cyberpunk-blue "#0000ff")    ;; blue
      (cyberpunk-blue-1 "#7b68ee")  ;; medium slate blue
      (cyberpunk-blue-2 "#6a5acd")  ;; slate blue
      (cyberpunk-blue-3 "#add8e6")  ;; light blue
      (cyberpunk-blue-4 "#b2dfee")  ;; LightBlue2
      (cyberpunk-blue-5 "#4c83ff")
      (cyberpunk-blue-6 "#96CBFE")
      (cyberpunk-blue-7 "#00ffff")
      (cyberpunk-blue-8 "#4F94CD")
      (cyberpunk-magenta "#dc8cc3")
      (cyberpunk-black   "#000000")
;;      (cyberpunk-black   noir-1)	  
      (cyberpunk-black-2 "#0C1021")
      (cyberpunk-black-3 "#0A0A0A")
      (cyberpunk-gray "#d3d3d3")
      (cyberpunk-gray-2 "#8B8989")
      (cyberpunk-gray-3 "#919191")
      (cyberpunk-gray-4 "#999999")
      (cyberpunk-gray-5 "#333333")
      (cyberpunk-gray-6 "#1A1A1A")
      (cyberpunk-gray-7 "#4D4D4D")
      (cyberpunk-gray-8 "#262626")
      (cyberpunk-white "#ffffff")
      (cyberpunk-white-2 "#F8F8F8")
      (cyberpunk-white-3 "#fffafa"))
   (custom-theme-set-faces
   'fonce12
        `(default ((,class (:background ,bg1 :foreground ,fg1))))
        `(font-lock-builtin-face ((,class (:foreground ,builtin))))
        `(font-lock-comment-face ((,class (:foreground ,comment))))
	`(font-lock-negation-char-face ((,class (:foreground ,const))))
	`(font-lock-reference-face ((,class (:foreground ,const))))
	`(font-lock-constant-face ((,class (:foreground ,const))))
        `(font-lock-doc-face ((,class (:foreground ,comment))))
        `(font-lock-function-name-face ((,class (:foreground ,func ))))
        `(font-lock-keyword-face ((,class (:bold ,class :foreground ,keyword))))
        `(font-lock-string-face ((,class (:foreground ,str))))
        `(font-lock-type-face ((,class (:foreground ,type ))))
        `(font-lock-variable-name-face ((,class (:foreground ,var))))
        `(font-lock-warning-face ((,class (:foreground ,warning :background ,bg2))))
        `(term-color-black ((,class (:foreground ,fg2 :background nil))))
        `(region ((,class (:background ,fg1 :foreground ,bg1))))
        `(highlight ((,class (:foreground ,fg3 :background ,bg3))))
	`(hl-line ((,class (:background  ,bg2))))
	`(fringe ((,class (:background ,bg2 :foreground ,fg4))))
	`(cursor ((,class (:background ,warning))))
        `(isearch ((,class (:bold t :foreground ,warning :background ,bg3))))
        `(mode-line ((,class (:box (:line-width 1 :color nil) :bold t :foreground ,fg4 :background ,bg2))))
        `(mode-line-inactive ((,class (:box (:line-width 1 :color nil :style pressed-button) :foreground ,var :background ,bg1 :weight normal))))
        `(mode-line-buffer-id ((,class (:bold t :foreground ,func :background nil))))
	`(mode-line-highlight ((,class (:foreground ,keyword :box nil :weight bold))))
        `(mode-line-emphasis ((,class (:foreground ,fg1))))
	`(vertical-border ((,class (:foreground ,fg3))))
        `(minibuffer-prompt ((,class (:bold t :foreground ,keyword))))
        `(default-italic ((,class (:italic t))))
	`(link ((,class (:foreground ,const :underline t))))

	;; cyberpunk-theme.el
	`(org-document-title ((,class (:foreground ,jaune-1 :weight bold :height 1.5))))
	`(org-document-info ((,class (:foreground ,bleu-7  :weight bold))))
	`(org-document-info-keyword ((,class (:foreground ,bleu-7 ))))
	`(org-code ((,class (:foreground ,fg1))))
	`(org-hide ((,class (:foreground ,fg4))))

	`(org-level-1 ((,class (:foreground ,cyberpunk-pink-1))))
	`(org-level-2 ((,class (:foreground ,cyberpunk-yellow))))
	`(org-level-3 ((,class (:foreground ,cyberpunk-blue-5))))
	`(org-level-4 ((,class (:foreground ,cyberpunk-green))))
	`(org-level-5 ((,class (:foreground ,cyberpunk-orange))))
	`(org-level-6 ((,class (:foreground ,cyberpunk-pink))))
	`(org-level-7 ((,class (:foreground ,cyberpunk-green+3))))
	`(org-level-8 ((,class (:foreground ,cyberpunk-blue-1))))

        ;; `(org-level-1 ((,class (:bold t :foreground ,fg2 :height 1.1))))
        ;; `(org-level-2 ((,class (:bold nil :foreground ,fg3))))
        ;; `(org-level-3 ((,class (:bold t :foreground ,fg4))))
        ;; `(org-level-4 ((,class (:bold nil :foreground ,bg4))))
        `(org-date ((,class (:underline t :foreground ,var) )))
        `(org-footnote  ((,class (:underline t :foreground ,fg4))))
        `(org-link ((,class (:underline t :foreground ,type ))))
        `(org-special-keyword ((,class (:foreground ,func))))
        `(org-block ((,class (:foreground ,fg3))))
        `(org-quote ((,class (:inherit org-block :slant italic))))
        `(org-verse ((,class (:inherit org-block :slant italic))))
        `(org-todo ((,class (:box (:line-width 1 :color ,fg3) :foreground ,keyword :bold t))))
        `(org-done ((,class (:box (:line-width 1 :color ,bg3) :bold t :foreground ,bg4))))
        `(org-warning ((,class (:underline t :foreground ,warning))))
        `(org-agenda-structure ((,class (:weight bold :foreground ,fg3 :box (:color ,fg4) :background ,bg3))))
        `(org-agenda-date ((,class (:foreground ,var :height 1.1 ))))
        `(org-agenda-date-weekend ((,class (:weight normal :foreground ,fg4))))
        `(org-agenda-date-today ((,class (:weight bold :foreground ,keyword :height 1.4))))
        `(org-agenda-done ((,class (:foreground ,bg4))))
	`(org-scheduled ((,class (:foreground ,type))))
        `(org-scheduled-today ((,class (:foreground ,func :weight bold :height 1.2))))
	`(org-ellipsis ((,class (:foreground ,builtin))))
	`(org-verbatim ((,class (:foreground ,fg4))))

	`(org-tag ((,class (:bold t :weight bold))))
	`(org-column ((,class (:background ,cyberpunk-gray-7 :foreground ,cyberpunk-black))))
	`(org-column-title ((,class (:background ,cyberpunk-gray-7 :underline t :weight bold))))
	`(org-block ((,class (:foreground ,cyberpunk-fg :background ,cyberpunk-bg-05))))
	`(org-block-begin-line  ((,class (:foreground ,bleu-1))))
	`(org-block-background ((,class (:background ,gris-7))))
	`(org-block-end-line  ((,class (:foreground ,bleu-1))))

	
	`(font-latex-bold-face ((,class (:foreground ,type))))
	`(font-latex-italic-face ((,class (:foreground ,var :italic t))))
	`(font-latex-string-face ((,class (:foreground ,str))))
	`(font-latex-match-reference-keywords ((,class (:foreground ,const))))
	`(font-latex-match-variable-keywords ((,class (:foreground ,var))))
	`(ido-only-match ((,class (:foreground ,warning))))
	`(org-sexp-date ((,class (:foreground ,fg4))))
	`(ido-first-match ((,class (:foreground ,keyword :bold t))))
        `(ivy-current-match ((,class (:foreground ,fg3 :inherit highlight :underline t))))
	`(gnus-header-content ((,class (:foreground ,keyword))))
	`(gnus-header-from ((,class (:foreground ,var))))
	`(gnus-header-name ((,class (:foreground ,type))))
	`(gnus-header-subject ((,class (:foreground ,func :bold t))))
	`(mu4e-view-url-number-face ((,class (:foreground ,type))))
	`(mu4e-cited-1-face ((,class (:foreground ,fg2))))
	`(mu4e-cited-7-face ((,class (:foreground ,fg3))))
	`(mu4e-header-marks-face ((,class (:foreground ,type))))
	`(ffap ((,class (:foreground ,fg4))))
	`(js2-private-function-call ((,class (:foreground ,const))))
	`(js2-jsdoc-html-tag-delimiter ((,class (:foreground ,str))))
	`(js2-jsdoc-html-tag-name ((,class (:foreground ,var))))
	`(js2-external-variable ((,class (:foreground ,type  ))))
        `(js2-function-param ((,class (:foreground ,const))))
        `(js2-jsdoc-value ((,class (:foreground ,str))))
        `(js2-private-member ((,class (:foreground ,fg3))))
        `(js3-warning-face ((,class (:underline ,keyword))))
        `(js3-error-face ((,class (:underline ,warning))))
        `(js3-external-variable-face ((,class (:foreground ,var))))
        `(js3-function-param-face ((,class (:foreground ,fg2))))
        `(js3-jsdoc-tag-face ((,class (:foreground ,keyword))))
        `(js3-instance-member-face ((,class (:foreground ,const))))
	`(warning ((,class (:foreground ,warning))))
	`(ac-completion-face ((,class (:underline t :foreground ,keyword))))
	`(info-quoted-name ((,class (:foreground ,builtin))))
	`(info-string ((,class (:foreground ,str))))
	`(icompletep-determined ((,class :foreground ,builtin)))
        `(undo-tree-visualizer-current-face ((,class :foreground ,builtin)))
        `(undo-tree-visualizer-default-face ((,class :foreground ,fg2)))
        `(undo-tree-visualizer-unmodified-face ((,class :foreground ,var)))
        `(undo-tree-visualizer-register-face ((,class :foreground ,type)))
	`(slime-repl-inputed-output-face ((,class (:foreground ,type))))
        `(trailing-whitespace ((,class :foreground nil :background ,warning)))
        `(rainbow-delimiters-depth-1-face ((,class :foreground ,fg1)))
        `(rainbow-delimiters-depth-2-face ((,class :foreground ,type)))
        `(rainbow-delimiters-depth-3-face ((,class :foreground ,var)))
        `(rainbow-delimiters-depth-4-face ((,class :foreground ,const)))
        `(rainbow-delimiters-depth-5-face ((,class :foreground ,keyword)))
        `(rainbow-delimiters-depth-6-face ((,class :foreground ,fg1)))
        `(rainbow-delimiters-depth-7-face ((,class :foreground ,type)))
        `(rainbow-delimiters-depth-8-face ((,class :foreground ,var)))
        `(magit-item-highlight ((,class :background ,bg3)))
        `(magit-section-heading        ((,class (:foreground ,keyword :weight bold))))
        `(magit-hunk-heading           ((,class (:background ,bg3))))
        `(magit-section-highlight      ((,class (:background ,bg2))))
        `(magit-hunk-heading-highlight ((,class (:background ,bg3))))
        `(magit-diff-context-highlight ((,class (:background ,bg3 :foreground ,fg3))))
        `(magit-diffstat-added   ((,class (:foreground ,type))))
        `(magit-diffstat-removed ((,class (:foreground ,var))))
        `(magit-process-ok ((,class (:foreground ,func :weight bold))))
        `(magit-process-ng ((,class (:foreground ,warning :weight bold))))
        `(magit-branch ((,class (:foreground ,const :weight bold))))
        `(magit-log-author ((,class (:foreground ,fg3))))
        `(magit-hash ((,class (:foreground ,fg2))))
        `(magit-diff-file-header ((,class (:foreground ,fg2 :background ,bg3))))
        `(lazy-highlight ((,class (:foreground ,fg2 :background ,bg3))))
        `(term ((,class (:foreground ,fg1 :background ,bg1))))
        `(term-color-black ((,class (:foreground ,bg3 :background ,bg3))))
        `(term-color-blue ((,class (:foreground ,func :background ,func))))
        `(term-color-red ((,class (:foreground ,keyword :background ,bg3))))
        `(term-color-green ((,class (:foreground ,type :background ,bg3))))
        `(term-color-yellow ((,class (:foreground ,var :background ,var))))
        `(term-color-magenta ((,class (:foreground ,builtin :background ,builtin))))
        `(term-color-cyan ((,class (:foreground ,str :background ,str))))
        `(term-color-white ((,class (:foreground ,fg2 :background ,fg2))))
        `(rainbow-delimiters-unmatched-face ((,class :foreground ,warning)))
        `(helm-header ((,class (:foreground ,fg2 :background ,bg1 :underline nil :box nil))))
        `(helm-source-header ((,class (:foreground ,keyword :background ,bg1 :underline nil :weight bold))))
        `(helm-selection ((,class (:background ,bg2 :underline nil))))
        `(helm-selection-line ((,class (:background ,bg2))))
        `(helm-visible-mark ((,class (:foreground ,bg1 :background ,bg3))))
        `(helm-candidate-number ((,class (:foreground ,bg1 :background ,fg1))))
        `(helm-separator ((,class (:foreground ,type :background ,bg1))))
        `(helm-time-zone-current ((,class (:foreground ,builtin :background ,bg1))))
        `(helm-time-zone-home ((,class (:foreground ,type :background ,bg1))))
        `(helm-buffer-not-saved ((,class (:foreground ,type :background ,bg1))))
        `(helm-buffer-process ((,class (:foreground ,builtin :background ,bg1))))
        `(helm-buffer-saved-out ((,class (:foreground ,fg1 :background ,bg1))))
        `(helm-buffer-size ((,class (:foreground ,fg1 :background ,bg1))))
        `(helm-ff-directory ((,class (:foreground ,func :background ,bg1 :weight bold))))
        `(helm-ff-file ((,class (:foreground ,fg1 :background ,bg1 :weight normal))))
        `(helm-ff-executable ((,class (:foreground ,var :background ,bg1 :weight normal))))
        `(helm-ff-invalid-symlink ((,class (:foreground ,warning2 :background ,bg1 :weight bold))))
        `(helm-ff-symlink ((,class (:foreground ,keyword :background ,bg1 :weight bold))))
        `(helm-ff-prefix ((,class (:foreground ,bg1 :background ,keyword :weight normal))))
        `(helm-grep-cmd-line ((,class (:foreground ,fg1 :background ,bg1))))
        `(helm-grep-file ((,class (:foreground ,fg1 :background ,bg1))))
        `(helm-grep-finish ((,class (:foreground ,fg2 :background ,bg1))))
        `(helm-grep-lineno ((,class (:foreground ,fg1 :background ,bg1))))
        `(helm-grep-match ((,class (:foreground nil :background nil :inherit helm-match))))
        `(helm-grep-running ((,class (:foreground ,func :background ,bg1))))
        `(helm-moccur-buffer ((,class (:foreground ,func :background ,bg1))))
        `(helm-source-go-package-godoc-description ((,class (:foreground ,str))))
        `(helm-bookmark-w3m ((,class (:foreground ,type))))
        `(company-echo-common ((,class (:foreground ,bg1 :background ,fg1))))
        `(company-preview ((,class (:background ,bg1 :foreground ,var))))
        `(company-preview-common ((,class (:foreground ,bg2 :foreground ,fg3))))
        `(company-preview-search ((,class (:foreground ,type :background ,bg1))))
        `(company-scrollbar-bg ((,class (:background ,bg3))))
        `(company-scrollbar-fg ((,class (:foreground ,keyword))))
        `(company-tooltip ((,class (:foreground ,fg2 :background ,bg1 :bold t))))
        `(company-tooltop-annotation ((,class (:foreground ,const))))
        `(company-tooltip-common ((,class ( :foreground ,fg3))))
        `(company-tooltip-common-selection ((,class (:foreground ,str))))
        `(company-tooltip-mouse ((,class (:inherit highlight))))
        `(company-tooltip-selection ((,class (:background ,bg3 :foreground ,fg3))))
        `(company-template-field ((,class (:inherit region))))
        `(web-mode-builtin-face ((,class (:inherit ,font-lock-builtin-face))))
        `(web-mode-comment-face ((,class (:inherit ,font-lock-comment-face))))
        `(web-mode-constant-face ((,class (:inherit ,font-lock-constant-face))))
        `(web-mode-keyword-face ((,class (:foreground ,keyword))))
        `(web-mode-doctype-face ((,class (:inherit ,font-lock-comment-face))))
        `(web-mode-function-name-face ((,class (:inherit ,font-lock-function-name-face))))
        `(web-mode-string-face ((,class (:foreground ,str))))
        `(web-mode-type-face ((,class (:inherit ,font-lock-type-face))))
        `(web-mode-html-attr-name-face ((,class (:foreground ,func))))
        `(web-mode-html-attr-value-face ((,class (:foreground ,keyword))))
        `(web-mode-warning-face ((,class (:inherit ,font-lock-warning-face))))
        `(web-mode-html-tag-face ((,class (:foreground ,builtin))))
        `(jde-java-font-lock-package-face ((t (:foreground ,var))))
        `(jde-java-font-lock-public-face ((t (:foreground ,keyword))))
        `(jde-java-font-lock-private-face ((t (:foreground ,keyword))))
        `(jde-java-font-lock-constant-face ((t (:foreground ,const))))
        `(jde-java-font-lock-modifier-face ((t (:foreground ,fg2))))
        `(jde-jave-font-lock-protected-face ((t (:foreground ,keyword))))
        `(jde-java-font-lock-number-face ((t (:foreground ,var))))
        `(yas-field-highlight-face ((t (:background ,bg4))))
        )
  ;; Legacy
  (if (< emacs-major-version 22)
    (custom-theme-set-faces
      'fonce12
      `(show-paren-match-face ((,class (:background ,warning)))) ;; obsoleted in 22.1, removed 2016
    )
   (custom-theme-set-faces
      'fonce12
      `(show-paren-match ((,class (:foreground ,bg1 :background ,str))))
      `(show-paren-mismatch ((,class (:foreground ,bg1 :background ,warning))))
   )
  )
  ;; emacs >= 26.1
  (when (>= emacs-major-version 26)
    (custom-theme-set-faces
     'fonce12
     `(line-number ((t (:inherit fringe))))
     `(line-number-current-line ((t (:inherit fringe :foreground "white" :weight bold))))))
  ;; emacs >= 27.1
  (when (>= emacs-major-version 27)
    (custom-theme-set-faces
     'fonce12
     `(tab-line              ((,class (:background ,bg2 :foreground ,fg4))))
     `(tab-line-tab          ((,class (:inherit tab-line))))
     `(tab-line-tab-inactive ((,class (:background ,bg2 :foreground ,fg4))))
     `(tab-line-tab-current  ((,class (:background ,bg1 :foreground ,fg1))))
     `(tab-line-highlight    ((,class (:background ,bg1 :foreground ,fg2))))))
   )

;;;###autoload
(when load-file-name
  (add-to-list 'custom-theme-load-path
               (file-name-as-directory (file-name-directory load-file-name))))

(provide-theme 'fonce12)

;; Local Variables:
;; no-byte-compile: t
;; End:

;;; fonce12-theme.el ends here
