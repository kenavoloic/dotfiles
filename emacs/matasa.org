#+TITLE: Matasa, septembre 2024
#+AUTHOR: CCA
#+STARTUP: content
#+OPTIONS: toc:nil num:nil

* Courriel
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Claude Agbangla"
      user-mail-address "claude.agbangla@mts-sarl.fr")
#+END_SRC

* Optimisation

#+begin_src emacs-lisp
(setq gc-cons-threshold 50000000)
#+end_src

* Use-package
Existe désormais par défaut depuis emacs 29, donc require suffit.
#+begin_src emacs-lisp
(require 'use-package)
(require 'use-package-ensure)
(setq use-package-always-ensure t)
#+end_src

https://github.com/hrs/dotfiles/blob/main/emacs/.config/emacs/configuration.org
#+begin_src emacs-lisp
(setq use-package-always-defer t)
#+end_src

https://github.com/hrs/dotfiles/blob/main/emacs/.config/emacs/configuration.org
#+begin_src emacs-lisp
(use-package auto-compile
  :ensure t
  :config (auto-compile-on-load-mode))
(setq load-prefer-newer t)
#+end_src

* Recharge configuration
#+BEGIN_SRC emacs-lisp
(defun rechargeConfiguration()
(interactive)
(load-file "~/.emacs.d/init.el"))
#+END_SRC

#+RESULTS:
: rechargeConfiguration

#+begin_src emacs-lisp
(use-package restart-emacs
  :ensure t)
#+end_src



* Texte, typographie
** Fontes
#+begin_src emacs-lisp
  ;; (defconst fonteParDefaut "Anonymous Pro")
  ;; (defconst monoParDefaut "Anonymous Pro")  
  ;; (defconst variableParDefaut "Cardo")
  (defconst fonteParDefaut "Consolas")
  (defconst monoParDefaut "Consolas")  
  (defconst variableParDefaut "Cardo")

(set-face-attribute 'default nil :family monoParDefaut :height 240)
(set-face-attribute 'fixed-pitch nil :family monoParDefaut :height 240)
(set-face-attribute 'variable-pitch nil :family variableParDefaut :height 260)
#+end_src

** Uppercase-region, lowercase-region
https://github.com/pascalfleury/emacs-config/blob/master/emacs_setup.org
#+begin_src emacs-lisp
(put 'upcase-region 'disabled nil)  ;; C-x C-u
(put 'downcase-region 'disabled nil)  ;; C-x C-l (lowercase L)

;; C-x n <key>. Widen with C-x n w
(put 'narrow-to-region 'disabled nil)  ; C-x n n
(put 'narrow-to-defun  'disabled nil)
(put 'narrow-to-page   'disabled nil)
#+end_src


** signes doubles
  #+BEGIN_SRC emacs-lisp
(defun cca-exclamation()
  (interactive)
  (save-excursion
    (insert " !")))

(defun cca-interrogation()
  (interactive)
  (save-excursion
    (insert " ?")))

(defun cca-deuxpoints()
  (interactive)
  (save-excursion
    (insert " :")))

(defun cca-pointvirgule()
  (interactive)
  (save-excursion
    (insert " ;")))


  #+END_SRC

** espaces
    #+BEGIN_SRC emacs-lisp
;;; insert-char remplace ucs-insert depuis emacs 24
    (defun cca-insecable()
      (interactive)
      (save-excursion)
    (insert-char '#xa0))

    (defun cca-fine-secable()
      (interactive)
      (save-excursion)
    (insert-char '#x2009))

    (defun cca-fine-insecable()
      (interactive)
      (save-excursion)
    (insert-char '#x202f))


    (defun cca-tiret-cadratin()
      (interactive)
      (save-excursion)
    (insert-char '#x2014))

    (defun cca-tiret-demi-cadratin()
      (interactive)
      (save-excursion)
    (insert-char '#x2013))
  #+END_SRC

** ligatures et autres
    #+BEGIN_SRC emacs-lisp

(defun cca-ae()
  (interactive)
  (save-excursion)
  (insert-char '#x00e6))
 
(defun cca-oe()
  (interactive)
  (save-excursion)
  (insert-char '#x0153))

(defun cca-left()
  (interactive)
  (save-excursion)
(insert-char '#x201c))

(defun cca-right()
  (interactive)
  (save-excursion)
(insert-char '#x201d))

(defun cca-left-single()
  (interactive)
  (save-excursion)
(insert-char '#x2018))

(defun cca-right-single()
  (interactive)
  (save-excursion)
(insert-char '#x2019))

(defun cca-ampersand()
  (interactive)
  (save-excursion)
(insert-char '#x026))

(defun cca-apostrophe()
  (interactive)
  (save-excursion)
(insert-char '#x2019))

(defun cca-suspension()
  (interactive)
  (save-excursion)
(insert-char '#x2026))

  #+END_SRC

** Recherche orthographique
https://irfu.cea.fr/Pisp/vianney.lebouteiller/emacs.html
#+begin_src emacs-lisp
;;; https://irfu.cea.fr/Pisp/vianney.lebouteiller/emacs.html
  (defun recherche-mot-dico()
    "Recherche le mot sous le curseur dans cnrtl.fr "
    (interactive)
    (let (word)
      (setq word
	    (if (use-region-p)
		(buffer-substring-no-properties (region-beginning) (region-end))
	      (current-word)))
      (setq word (replace-regexp-in-string " " "_" word))
      (browse-url (concat "http://www.cnrtl.fr/definition/" word))
  ))
#+end_src

* smart-shift
https://github.com/hbin/smart-shift
#+begin_src emacs-lisp
(use-package smart-shift)
#+end_src

#+begin_src emacs-lisp
;; binds C-C <arrows>
(when (require 'smart-shift nil 'noerror)
  (global-smart-shift-mode 1))
#+end_src

#+RESULTS:
: t

* Dired

#+begin_src emacs-lisp
  (use-package dired
    :ensure nil ; parce qu'il est désormais installé par défaut donc pas besoin de le télécharger
    :diminish dired-omit-mode
    :hook (dired-mode . dired-hide-details-mode) ;; par défaut masque les fichiers cachés
    :custom
    (dired-listing-switches "-agho --group-directories-first")
    (dired-dwim-target t)
  )

#+end_src

#+begin_src emacs-lisp
(use-package dired-git
  :ensure t
  :hook (dired-mode . dired-git-mode))

#+end_src

#+begin_src emacs-lisp
(use-package dired-gitignore
  :ensure t
  :bind
  (:map dired-mode-map ("C-." . dired-gitignore-mode)))

#+end_src

https://github.com/pprevos/emacs-config/blob/main/emacs-configuration.org
#+begin_src emacs-lisp
  (use-package all-the-icons-dired
    ;;:config (add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
    :hook (dired-mode . all-the-icons-dired-mode)
    )
#+end_src

#+begin_src emacs-lisp
(use-package dired-subtree
  :ensure t
  :bind (:map dired-mode-map
	      ("i" . dired-subtree-insert)
	      (";" . dired-subtree-remove)
	      ("<tab>" . dired-subtree-toggle)
	      ("<backtab>" . dired-subtree-cycle)))
#+end_src

#+begin_src emacs-lisp
;; (use-package dired-subtree
;;   :ensure t
;;   :after dired
;;   :config
;;   (bind-key "<tab>" #'dired-subtree-toggle dired-mode-map)
;;   (bind-key "<backtab>" #'dired-subtree-cycle dired-mode-map)
;;   (bind-key "i" #'dired-subtree-insert dired-mode-map)
;;   (bind-key ";" #'dired-subtree-remove dired-mode-map))

#+end_src

#+RESULTS:

#+begin_src emacs-lisp
(use-package dired-collapse
  :ensure t)
#+end_src

#+begin_src emacs-lisp
(use-package dired-filter
  :ensure t)
#+end_src

#+RESULTS:

#+begin_src emacs-lisp
(use-package dired-rainbow
  :ensure t)
#+end_src

#+begin_src emacs-lisp
(use-package dired-ranger
  :ensure t)
#+end_src

#+begin_src emacs-lisp
(use-package dired-quick-sort
  :config (dired-quick-sort-setup))
#+end_src

* which-key  
#+begin_src emacs-lisp
(use-package which-key
:config (which-key-mode))
#+end_src
  
* vertico, savehist, marginalia, orderless

#+begin_src emacs-lisp
(use-package vertico
  :init (vertico-mode)
  (setq vertico-count 10
	vertico-resize t
	vertico-cycle t))
  
#+end_src

#+begin_src emacs-lisp
(use-package savehist
  :init
  (savehist-mode))
#+end_src

#+begin_src emacs-lisp
(use-package marginalia
  :after vertico
  :ensure t
  :custom
  (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
  :init
  (marginalia-mode))
#+end_src

#+begin_src emacs-lisp
(use-package orderless
  :init
  (setq completion-styles '(orderless) ;;'(orderless basic)
	completion-category-defaults nil
	completion-category-overrides 
	'((file (styles partial-completion)))))
#+end_src

#+begin_src emacs-lisp
(use-package nerd-icons-completion
  ;;;:when (icons-displayable-p)
  :hook (vertico-mode . nerd-icons-completion-mode))
#+end_src

#+begin_src emacs-lisp
;; (use-package vertico
;;   :init
;;   (vertico-mode)
;;   (setq vertico-count 10)
;;   (setq vertico-resize t)
;;   (setq vertico-cycle t))


;; (use-package savehist
;;   :init
;;   (savehist-mode))

;; (use-package marginalia
;;   :after vertico
;;   :ensure t
;;   :custom
;;   (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
;;   :init
;;   (marginalia-mode))

;; (use-package orderless
;;   :init
;;   (setq completion-styles '(orderless basic)
;; 	completion-category-defaults nil
;; 	completion-category-overrides 
;; 	'((file (styles partial-completion)))))

;; (use-package nerd-icons-completion
;;   ;;;:when (icons-displayable-p)
;;   :hook (vertico-mode . nerd-icons-completion-mode))
#+end_src

* treesitter
https://www.ovistoica.com/blog/2024-7-05-modern-emacs-typescript-web-tsx-config

#+begin_src emacs-lisp
  (use-package treesit
  :ensure nil
	:mode (("\\.tsx\\'" . tsx-ts-mode)
	       ("\\.js\\'"  . typescript-ts-mode)
	       ("\\.mjs\\'" . typescript-ts-mode)
	       ("\\.mts\\'" . typescript-ts-mode)
	       ("\\.cjs\\'" . typescript-ts-mode)
	       ("\\.ts\\'"  . typescript-ts-mode)
	       ("\\.jsx\\'" . tsx-ts-mode)
	       ("\\.json\\'" .  json-ts-mode)
	       ("\\.Dockerfile\\'" . dockerfile-ts-mode)
	       ("\\.prisma\\'" . prisma-ts-mode)
	       ;; More modes defined here...
	       )
	:preface
	(defun os/setup-install-grammars ()
	  "Install Tree-sitter grammars if they are absent."
	  (interactive)
	  (dolist (grammar
		   '((css . ("https://github.com/tree-sitter/tree-sitter-css" "v0.20.0"))
		     (bash "https://github.com/tree-sitter/tree-sitter-bash")
		     (html . ("https://github.com/tree-sitter/tree-sitter-html" "v0.20.1"))
		     (javascript . ("https://github.com/tree-sitter/tree-sitter-javascript" "v0.21.2" "src"))
		     (json . ("https://github.com/tree-sitter/tree-sitter-json" "v0.20.2"))
		     (python . ("https://github.com/tree-sitter/tree-sitter-python" "v0.20.4"))
		     (go "https://github.com/tree-sitter/tree-sitter-go" "v0.20.0")
		     (markdown "https://github.com/ikatyang/tree-sitter-markdown")
		     (make "https://github.com/alemuller/tree-sitter-make")
		     (elisp "https://github.com/Wilfred/tree-sitter-elisp")
		     (cmake "https://github.com/uyha/tree-sitter-cmake")
		     (c "https://github.com/tree-sitter/tree-sitter-c")
		     (cpp "https://github.com/tree-sitter/tree-sitter-cpp")
		     (toml "https://github.com/tree-sitter/tree-sitter-toml")
		     (tsx . ("https://github.com/tree-sitter/tree-sitter-typescript" "v0.20.3" "tsx/src"))
		     (typescript . ("https://github.com/tree-sitter/tree-sitter-typescript" "v0.20.3" "typescript/src"))
		     (yaml . ("https://github.com/ikatyang/tree-sitter-yaml" "v0.5.0"))
		     (prisma "https://github.com/victorhqc/tree-sitter-prisma")))
	    (add-to-list 'treesit-language-source-alist grammar)
	    ;; Only install `grammar' if we don't already have it
	    ;; installed. However, if you want to *update* a grammar then
	    ;; this obviously prevents that from happening.
	    (unless (treesit-language-available-p (car grammar))
	      (treesit-install-language-grammar (car grammar)))))

	;; Optional, but recommended. Tree-sitter enabled major modes are
	;; distinct from their ordinary counterparts.
	;;
	;; You can remap major modes with `major-mode-remap-alist'. Note
	;; that this does *not* extend to hooks! Make sure you migrate them
	;; also
	(dolist (mapping
		 '((python-mode . python-ts-mode)
		   (css-mode . css-ts-mode)
		   (typescript-mode . typescript-ts-mode)
		   (js-mode . typescript-ts-mode)
		   (js2-mode . typescript-ts-mode)
		   (c-mode . c-ts-mode)
		   (c++-mode . c++-ts-mode)
		   (c-or-c++-mode . c-or-c++-ts-mode)
		   (bash-mode . bash-ts-mode)
		   (css-mode . css-ts-mode)
		   (json-mode . json-ts-mode)
		   (js-json-mode . json-ts-mode)
		   (sh-mode . bash-ts-mode)
		   (sh-base-mode . bash-ts-mode)))
	  (add-to-list 'major-mode-remap-alist mapping))
	:config
	(os/setup-install-grammars))

#+end_src

#+begin_src emacs-lisp
;; (use-package treesit-auto
;;   :custom
;;   (treesit-auto-install 'prompt)
;;   :config
;;   (treesit-auto-add-to-auto-mode-alist 'all)
;;   (global-treesit-auto-mode))
#+end_src

#+begin_src emacs-lisp
;;(setq treesit-auto-langs '(typescript java python php javascript))
#+end_src

* Auth-source
Choix du fichier : .netrc suivi d'un chmod 600

#+begin_src emacs-lisp
(setq auth-sources '("~/.authinfo.gpg" "~/.authinfo" "~/.netrc"))

#+end_src

* know-your-http-well
https://github.com/jwiegley/dot-emacs/blob/master/init.org
utilisations :
M-X http-...

#+begin_src emacs-lisp
(use-package know-your-http-well
  :commands (http-header
	     http-method
	     http-relation
	     http-status-code
	     media-type))

#+end_src

* Interface
** Themes 
#+begin_src emacs-lisp
;; (use-package gruvbox-theme
;;   :ensure t
;;   :config
;;   (load-theme 'gruvbox-dark-medium t))
#+end_src

#+begin_src emacs-lisp
(use-package gruvbox-theme
  :init (load-theme 'gruvbox-dark-medium t))

#+end_src
#+begin_src emacs-lisp
;; (use-package color-theme-sanityinc-tomorrow
;;   :ensure t
;;   :config
;;   (load-theme 'sanityinc-tomorrow-night t))
#+end_src

#+begin_src emacs-lisp
  ;;(use-package catppuccin-theme)
  ;; (setq catppuccin-flavor 'latte)
  ;;(catppuccin-reload)

#+end_src
** windmove
changement de fenêtre au moyen de SHIFT + flêche
#+begin_src emacs-lisp

  (when (fboundp 'windmove-default-keybindings)
    (windmove-default-keybindings))
#+end_src

** emacs
#+begin_src emacs-lisp
  (use-package emacs
    :defer nil
    :delight
    (auto-fill-function " AF")
    (visual-line-mode)
    :config
     (setq frame-title-format '("" (buffer-file-name "%f" (dired-directory dired-directory "%b")))
	   inhibit-startup-screen t
	   inhibit-splash-screen t
	   scroll-bar-mode -1
	   show-paren-mode 1
	   show-paren-delay 0
	   browse-url-browse-function 'browse-url-chromium
	   tab-width 4
	   transient-mark-mode t
	   mouse-wheel-follow-mouse t
	   scroll-step 1
	   scroll-conservatively 101
	   mouse-wheel-scroll-amount '(1)
	   mouse-wheel-progressive-speed nil
	   menu-bar-mode -1
	   tool-bar-mode -1
	   scroll-bar-mode -1
	   use-short-answers t
	   history-length 1000
	   trash-directory "~/.local/share/Trash/files"
	   delete-by-moving-to-trash t)
    )

#+end_src

https://raw.githubusercontent.com/bbatsov/emacs.d/master/init.el
#+begin_src emacs-lisp
(use-package elec-pair
  :config
  (electric-pair-mode +1))
#+end_src

#+RESULTS:

* Programmation
** Surligne les nombres
#+begin_src emacs-lisp
  (use-package highlight-numbers)
  (add-hook 'prog-mode-hook 'highlight-numbers-mode)
#+end_src

#+RESULTS:
| highlight-numbers-mode |

** Outils (in/dé)crémente sous le curseur
#+begin_src emacs-lisp
  (defun incremente(&optional arg)
    "Incrémenter le nombre sous le curseur"
    (interactive "*p")
    (let* ((bounds (bounds-of-thing-at-point 'word))
	   (beg (car bounds))
	   (end (cdr bounds))
	   (num (string-to-number (buffer-substring beg end)))
	   (incr (cond ((null arg) 1)
		       ((listp arg) -1)
		       (t arg)))
	   (value (+ num incr)))
      (delete-region beg end)
      (insert (format "%d" value))))
#+end_src

#+RESULTS:
: incremente

#+begin_src emacs-lisp
(defun plus()
  (interactive)
  (skip-chars-backward "0-9")
  (or (looking-at "[0-9]+")
      (error "No number at point."))
  (replace-match (number-to-string (1+ (string-to-number (match-string 0))))))
(global-set-key (kbd "M-à") 'plus)
#+end_src

#+RESULTS:
: plus

#+begin_src emacs-lisp
(defun moins()
  (interactive)
  (skip-chars-backward "0-9")
  (or (looking-at "[0-9]+")
      (error "No number at point."))
  (replace-match (number-to-string (1- (string-to-number (match-string 0))))))
(global-set-key (kbd "M-é") 'moins)
#+end_src

#+RESULTS:
: moins

** Rainbow-delimiters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
  :hook ((emacs-lisp-mode lisp-mode racket-mode) . rainbow-delimiters-mode))
#+end_src
** rainbow
#+begin_src emacs-lisp
  (use-package rainbow-mode
  :init
  (rainbow-mode))
#+end_src

** yasnippet
#+begin_src emacs-lisp
  (use-package yasnippet)
#+end_src
** sql-mariadb
Enable SQL history
#+begin_src emacs-lisp
(setq sql-input-ring-file-name "~/.emacs_sql_history")
(setq sql-input-ring-separator "\nGO\n")
(setq sql-mysql-options '("-A" "-t" "-C" "-f" "-n"))
(add-hook 'sql-interactive-mode-hook
          (lambda ()
            (sql-set-sqli-buffer-generally)))
#+end_src

* Org mode en lieu et place de =scratch=
https://github.com/pprevos/emacs-config/blob/main/emacs-configuration.org
#+begin_src emacs-lisp
  (setq-default initial-major-mode 'org-mode
			initial-scratch-message "#+TITLE: Awalé\n\n")
#+end_src

* Highlight line
https://www.gnu.org/software/emacs/manual/html_node/emacs/Cursor-Display.html#index-highlight-current-line
#+begin_src emacs-lisp
  (global-hl-line-mode)
#+end_src

* Eldoc
https://github.com/jwiegley/dot-emacs/blob/master/init.org
#+begin_src emacs-lisp
(use-package eldoc
  :diminish
  :hook ((c-mode-common emacs-lisp-mode) . eldoc-mode)
  :custom
  (eldoc-echo-area-use-multiline-p 3)
  (eldoc-echo-area-display-truncation-message nil))
#+end_src

* Plantuml
#+begin_src emacs-lisp
(setq org-plantuml-exec-mode 'plantuml)
;;(setq org-plantuml-executable-path "~/.config/plantuml.jar")
(setq org-plantuml-jar-path (expand-file-name "/usr/share/plantuml/plantuml.jar"))

#+end_src

* xclip
#+begin_src emacs-lisp
(use-package xclip)
(xclip-mode 1)

#+end_src

* Magit
#+begin_src emacs-lisp
(use-package magit
  :bind   ("C-x g" . magit-status)
  :config
  ;;(use-package git-commit)
  (use-package magit-section)
  (use-package with-editor)
  (use-package git-timemachine)

  (setq magit-bury-buffer-function 'magit-restore-window-configuration
	magit-display-buffer-function 'magit-display-buffer-fullframe-status-topleft-v1)
  )
  
#+end_src

#+begin_src emacs-lisp
;; Git modes
(use-package git-modes
  :ensure t)

(use-package gh-notify
  :ensure t)
(use-package magit-imerge
  :ensure t
  :after magit)

;; https://github.com/dandavison/magit-delta
;; (use-package magit-delta
;;   :ensure t
;;   :after magit
;;   :hook (magit-mode . magit-delta-mode))
#+end_src

#+RESULTS:

Permet de consulter rapidement l'historique d'un fichier
https://github.com/jwiegley/dot-emacs/blob/master/init.org

#+begin_src emacs-lisp
(use-package git-timemachine
  :commands git-timemachine)
#+end_src

* open street map viewer

;;; OSM CONFIGURATION
;;; --------------------------------------
;;;
;;; https://elpa.gnu.org/packages/osm.html#org666a5ba
#+begin_src emacs-lisp
(use-package osm
  :bind (("C-c o h" . osm-home)
	 ("C-c o s" . osm-search)
	 ("C-c o v" . osm-server)
	 ("C-c o t" . osm-goto)
	 ("C-c o x" . osm-gpx-show)
	 ("C-c o j" . osm-bookmark-jump))
  :init
  :custom
  (osm-server 'default)
  (osm-home '(53.356116 -1.463397 15))
  )
#+end_src

#+RESULTS:
: osm-bookmark-jump

* corfu

#+begin_src emacs-lisp
(use-package corfu
  :ensure t
  ;; Optional customizations
  :init
  (global-corfu-mode 1)
  (corfu-history-mode 1)
  (corfu-popupinfo-mode) ; Popup completion info
  :custom
  (corfu-cycle t)                 ; Allows cycling through candidates
  (corfu-auto t)                  ; Enable auto completion
  (corfu-auto-prefix 3)           ; Minimum length of prefix for completion
  (corfu-auto-delay 0.1)            ; No delay for completion
  (corfu-popupinfo-delay '(0.5 . 0.2))  ; Automatically update info popup after that numver of seconds
  (corfu-preview-current 'insert) ; insert previewed candidate
  (corfu-preselect 'prompt)
  (corfu-on-exact-match nil)      ; Don't auto expand tempel snippets
  ;; Optionally use TAB for cycling, default is `corfu-complete'.
  :bind (:map corfu-map
              ("M-SPC"      . corfu-insert-separator)
              ("TAB"        . corfu-next)
              ([tab]        . corfu-next)
              ("S-TAB"      . corfu-previous)
              ([backtab]    . corfu-previous)
              ("S-<return>" . corfu-insert)
              ("RET"        . corfu-insert))
  :config
  (add-hook 'eshell-mode-hook
            (lambda () (setq-local corfu-quit-at-boundary t
                                   corfu-quit-no-match t
                                   corfu-auto nil)
              (corfu-mode))
            nil
            t))
#+end_src

#+begin_src emacs-lisp
(unless (display-graphic-p)
  (use-package corfu-terminal
    :hook (global-corfu-mode . corfu-terminal-mode)))
#+end_src

#+begin_src emacs-lisp
(use-package nerd-icons-corfu
  :after corfu
  :init (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter))

#+end_src

#+begin_src emacs-lisp
;; (use-package cape
;;   :init
;;   (add-to-list 'completions-at-point-functions #'cape-file)
;;   (add-to-list 'completions-at-point-functions #'cape-keyword))
  #+end_src

#+begin_src emacs-lisp
;; (use-package kind-icon
;;   :config
;;   (setq kind-icon-default-face 'corfu-default
;; 	kind-icon-default-style '(:padding 0 :stroke 0 :margin 0 :radius 0 :height 0.9 :scale)
;; 	kind-icon-blend-frac 0.08)
;;   (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter)
;;   (add-hook 'counsel-load-theme #'(lambda () (interactive) (kind-icon-reset-cache)))
;;   (add-hook 'load-theme #'(lambda () (interactive) (kind-icon-reset-cache))))
  
#+end_src
* Flycheck
#+begin_src emacs-lisp
  (use-package flycheck
  :init
  (global-flycheck-mode t))

  (use-package elisp-lint)
#+end_src

* Flymake
https://github.com/jwiegley/dot-emacs/blob/master/init.org
#+begin_src emacs-lisp
(use-package flymake
  :defer t
  :custom-face
  (flymake-note ((t nil))))
#+end_src


* WorldClock
#+begin_src emacs-lisp
  (setq world-clock-list
		'(("Australia/Melbourne" "Melbourne")
		  ("America/Los_Angeles" "Seattle")
		  ("America/New_York" "New York")
		  ("Europe/London" "London")
		  ("Europe/Paris" "Paris")
		  ("Europe/Sofia" "Sofia")
		  ("Asia/Calcutta" "Bangalore")
		  ("Asia/Tokyo" "Tokyo")))
#+end_src

* org

#+begin_src emacs-lisp
  (use-package org
	:ensure nil ; parce qu'il est désormais installé par défaut donc pas besoin de le télécharger
	:config
	(setq org-startup-indented t
	  org-ellipsis " ↲"
	  org-hide-emphasis-markers t
	  org-startup-with-inline-images t
	  org-image-actual-width '(450)
	  org-hide-block-startup nil
	  org-catch-invisible-edits 'error
	  org-cycle-separator-lines 0
	  org-startup-with-latex-preview nil
	  org-export-with-smart-quotes t ; transforme ' en ’ au moment de l'export
	  org-confirm-babel-evaluate nil
	  org-tags-column 0 ; org column spacing for tags
	  org-src-preserve-indentation t ; don't indent src block for export capital pour du pythonb
	  org-src-fontify-natively t ; fontify
	  ))
#+end_src

#+RESULTS:
: t

https://github.com/pprevos/emacs-config/blob/main/emacs-configuration.org
#+begin_src emacs-lisp
  (use-package org-appear
    :hook (org-mode . org-appear-mode))
#+end_src

** Visual-line mode
#+begin_src emacs-lisp
(add-hook 'org-mode-hook (lambda () (visual-line-mode 1)))

#+end_src

** Superstar
#+begin_src emacs-lisp
(use-package org-superstar
:defer t
:hook (org-mode . org-superstar-mode))
#+end_src

** ob-restclient
#+begin_src emacs-lisp
(use-package ob-restclient
  :after org)
#+end_src

* org-tempo
#+begin_src emacs-lisp
(use-package org-tempo
  :demand t
  :ensure nil
  :config (setq org-structure-template-alist
		'(("el" . "src emacs-lisp")
		  ("e" . "example")
		  ("q" . "quote")
		  ("v" . "verse")
		  ("se" . "src emacs-lisp")
		  ("st" . "src typescript")
		  ("sh" . "src sh")
		  ("sp" . "src python :results output\n")
		  ("sr" . "src R :results output\n")
		  ("sj" . "src js :results output\n")
		  ("ja"  . "src java\n")
		  ("sq" . "src sql\n"))))
#+end_src

#+RESULTS:
: t

* org-babel
#+begin_src emacs-lisp
(use-package ob-mongo)
#+end_src

#+begin_src emacs-lisp
(use-package ob-php)
#+end_src

#+begin_src emacs-lisp
(use-package ob-prolog)
#+end_src

#+begin_src emacs-lisp
(use-package ob-typescript)
#+end_src

#+begin_src emacs-lisp
(org-babel-do-load-languages 'org-babel-load-languages
                             '(
			       (C . t)
                               (R . t)
                               (awk . t)
                               (clojure    . t)
                               (dot . t)
			       (emacs-lisp . t)
			       (gnuplot . t)
                               (haskell   . t)
			       ;;(http . t)
                               (java  . t)
                               (js     . t)
                               (latex . t)
                               (lilypond . t)
                               (lisp   . t)
                               (perl . t)
                               (php . t)
                               (plantuml . t)
                               (prolog . t)
                               (python . t)
                               (restclient . t)
                               (ruby . t)
			       (sass . t)
                               (scheme . t)
                               (shell  . t)
                               (sql    . t)
			       (sqlite . t)
			       (typescript . t)
                               ;;(csharp . t)
                               ;;(ein    . t)
                               ;;(jupyter . t)
                               ;;(scala . t)
                               ))
(setq org-confirm-babel-evaluate nil)
;; https://sachachua.com/dotemacs => Diagrams and graphics
(add-to-list 'org-src-lang-modes '("dot" . graphviz-dot))
#+end_src

#+RESULTS:
: ((dot . graphviz-dot) (php . php) (mongo . js) (C . c) (C++ . c++) (asymptote . asy) (bash . sh) (beamer . latex) (calc . fundamental) (cpp . c++) (ditaa . artist) (desktop . conf-desktop) (dot . fundamental) (elisp . emacs-lisp) (ocaml . tuareg) (screen . shell-script) (shell . sh) (sqlite . sql) (toml . conf-toml))

#+begin_src emacs-lisp
;; (org-babel-do-load-languages
;;  'org-babel-load-languages
;;  '((python . t)
;;    (shell . t)
;;    (emacs-lisp . t)
;;    (ditaa . t)
;;    (awk . t)
;;    (http . t)
;;    ))
#+end_src
* treemacs
#+begin_src emacs-lisp
(use-package treemacs
  :ensure t)
#+end_src

#+RESULTS:

* modeline : diminish, moody, minions

Ne pas oublier de M-x nerd-icons-install-fonts
#+begin_src emacs-lisp
  (use-package all-the-icons)
#+end_src

#+begin_src emacs-lisp
  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 15))
    :config (setq doom-modeline-buffer-file-name-style 'relative-from-project
		  doom-modeline-enable-word-count nil
		  doom-modeline-icon t
		  doom-modeline-major-mode-icon t
		  doom-modeline-major-mode-color-icon nil
		  doom-modeline-buffer-state-icon t
		  doom-modeline-major-mode-icon-color t))
#+end_src


#+begin_src emacs-lisp
;; (use-package doom-modeline
;;   :config
;;   (doom-modeline-mode)
;;   (setq doom-modeline-buffer-file-name-style 'relative-from-project
;; 	doom-modeline-icon t
;; 	doom-modeline-major-mode-icon t
;; 	domm-modeline-bar-width 3))
#+end_src

* eldoc
#+begin_src emacs-lisp
(use-package eldoc
  :ensure nil
  :diminish eldoc-mode
  :config (setq eldoc-idle-delay 0.4))
#+end_src

* plantuml
#+begin_src emacs-lisp
(setq org-plantuml-exec-mode 'plantuml)
;;(setq org-plantuml-executable-path "~/.config/plantuml.jar")
(setq org-plantuml-jar-path (expand-file-name "/usr/share/plantuml/plantuml.jar"))

#+end_src
* org-latex
https://github.com/hrs/dotfiles/blob/main/emacs/.config/emacs/configuration.org

** Exporting to PDF
- I want to produce PDFs with syntax highlighting in the code. The best way to do that seems to be with the =minted= package, but that package shells out to =pygments= to do the actual work. xelatex usually disallows shell commands; this enables that.
- Include the listings package in all of my LaTeX exports.
- Remove the intermediate TeX file when exporting to PDF.

#+begin_src emacs-lisp
(use-package ox-latex
  :ensure-system-package latexmk
  :ensure nil
  :after org
  :commands (org-export-dispatch)

  :custom
  (org-latex-pdf-process '("latexmk -xelatex -shell-escape -quiet -f %f"))

  (org-latex-src-block-backend 'listings)
  (org-latex-listings-options
   '(("basicstyle" "\\ttfamily")
     ("showstringspaces" "false")
     ("keywordstyle" "\\color{blue}\\textbf")
     ("commentstyle" "\\color{gray}")
     ("stringstyle" "\\color{green!70!black}")
     ("stringstyle" "\\color{red}")
     ("frame" "single")
     ("numbers" "left")
     ("numberstyle" "\\ttfamily")
     ("columns" "fullflexible")))

  (org-latex-packages-alist '(("" "listings")
                              ("" "booktabs")
                              ("AUTO" "polyglossia" t ("xelatex" "lualatex"))
                              ("" "grffile")
                              ("" "unicode-math")
                              ("" "xcolor")))

  :config
  (add-to-list 'org-latex-logfiles-extensions "tex"))

#+end_src

#+RESULTS:
: t

** Beamer
Allow exporting presentations to beamer.

#+begin_src emacs-lisp
(use-package ox-beamer
  :ensure nil
  :after ox-latex)

#+end_src

#+RESULTS:

#+begin_src emacs-lisp
;;(use-package auctex
;;  :custom
;;  (TeX-parse-self t)

;;  :config
;;  (TeX-global-PDF-mode 1)

;; (add-hook 'LaTeX-mode-hook
;;            (lambda ()
;;              (LaTeX-math-mode)
;;              (setq TeX-master t))))

#+end_src

#+RESULTS:
: t


* eslint
https://emacs-lsp.github.io/lsp-mode/tutorials/reactjs-tutorial/#linting
+ Installation globale sous root

npm install -g eslint

+ puis sous emacs
M-x lsp-install-server RET eslint RET

+ Création d'un fichier de configuration ESLint =.eslintrc.js=
  M-X lsp-eslint-create-default-configuration
  

* lsp5

#+begin_src emacs-lisp
(use-package lsp-mode
  :ensure t
  :defer t
  :init (setq lsp-keymap-prefix "C-c l"
	      lsp-diagnostics-provider :flymake ;;:flycheck
	      ;;lsp-modeline-code-actions-segments '(count icon name)
	      )
  :config (lsp-enable-which-key-integration t)
  :commands (lsp lsp-deferred))

#+end_src

#+begin_src emacs-lisp
(setq warning-suppress-types '((lsp-mode)))
#+end_src

;; https://github.com/emacs-lsp/dap-mode
#+begin_src emacs-lisp
(use-package dap-mode
  :ensure t
  :after lsp-mode
  :config
  (dap-auto-configure-mode))
#+end_src

#+begin_src emacs-lisp
(add-hook 'prog-mode-hook 'lsp-deferred)
;; Less chatty for unsupported modes
(setq lsp-warn-no-matched-clients nil)
#+end_src

#+begin_src emacs-lisp
(use-package lsp-ui
  :ensure t
  :hook ((lsp-mode . lsp-ui-mode)
	 ;;((tsx-ts-mode typescript-ts-mode js-ts-mode) . lsp-deferred)
	 )
  :config
  (setq
   lsp-ui-doc-border (face-foreground 'default)
   lsp-ui-doc-delay 1
   lsp-ui-doc-enable t
   lsp-ui-doc-header nil
   lsp-ui-doc-include-signature t
   lsp-ui-doc-position 'bottom
   lsp-ui-doc-show-with-cursor nil
   lsp-ui-doc-show-with-mouse t
   lsp-ui-doc-use-childframe nil
   lsp-ui-flycheck-enable t
   lsp-ui-flycheck-list-position 'right
   lsp-ui-flycheck-live-reporting t
   lsp-enable-folding nil
   lsp-ui-imenu-enable nil
   lsp-ui-peek-enable t
   lsp-ui-peek-list-width 60
   lsp-ui-peek-peek-height 25
   lsp-ui-sideline-delay 3
   lsp-ui-sideline-enable nil
   lsp-ui-sideline-ignore-duplicate t
   lsp-ui-sideline-show-code-actions nil
   lsp-ui-sideline-show-hover nil)
  :bind (:map lsp-ui-mode-map
	      ("C-c i" . lsp-ui-imenu)))

#+end_src

#+begin_src emacs-lisp
;; https://github.com/emacs-lsp/lsp-treemacs
(use-package lsp-treemacs
  :ensure t
  :config
  (setq lsp-treemacs-sync-mode 1)
  :bind ("C-c t" . treemacs))
#+end_src


* vimrc

Ajout également de vimls/vils pour lsp
#+begin_src emacs-lisp
(use-package vimrc-mode
  :ensure t)
#+end_src

#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.vim\\(rc\\)?\\'" . vimrc-mode))
#+end_src

* toml
#+begin_src emacs-lisp
(use-package toml-mode
  :ensure t)
#+end_src

#+RESULTS:

* webmode
#+begin_src emacs-lisp
(use-package web-mode
  :ensure t
  :mode (".html" ".css" ".scss" ".jinja" ".svelte")
  :custom
  (web-mode-markup-indent-offset 2)
  (web-mode-css-indent-offset 2)
  (web-mode-code-indent-offset 2)
  (web-mode-enable-current-element-highlight t)
  (web-mode-style-padding 1)
  (web-mode-script-padding 1)
  (web-mode-block-padding 0)
  (web-mode-enable-current-element-highlight t)
  (web-mode-enable-auto-pairing t)
  (web-mode-enable-css-colorization t))

#+end_src

* js2
#+begin_src emacs-lisp
(use-package js2-mode
  :ensure t
  :config
  ;; (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
  ;;(add-hook 'js2-mode-hook (lambda () (setq js2-basic-offset 2)))
  (add-hook 'js2-mode-hook 'lsp)
  )
#+end_src


* json

#+begin_src emacs-lisp
(use-package json-mode
  :ensure t)
#+end_src

#+begin_src emacs-lisp
(use-package json-reformat
  :ensure t
  :config
  (setq json-reformat:indent-width 2))
#+end_src

* kurecolor

A collection of tools for working with color in Emacs.

https://github.com/emacsfodder/kurecolor

#+begin_src emacs-lisp
(use-package kurecolor
  :ensure t)
#+end_src


#+begin_example
(kurecolor-hex-to-cssrgb "#347291")
 ⇒ "rgb(52, 114, 145)"
(kurecolor-hex-to-cssrgb "#000000")
 ⇒ "rgb(0, 0, 0)"
(kurecolor-hex-to-cssrgb "#888888")
 ⇒ "rgb(136, 136, 136)"
#+end_example

#+begin_example
(kurecolor-hex-to-rgb "#347291")
 ⇒ '(0.2039 0.4471 0.5686)
(kurecolor-hex-to-rgb "#72FF91")
 ⇒ '(0.4471 1.0 0.5686)
(kurecolor-hex-to-rgb "#720091")
 ⇒ '(0.4471 0.0 0.5686)
#+end_example


#+begin_example
(kurecolor-hex-to-rgba "#34729100")
 ⇒ '(0.2039 0.4471 0.5686 0.0)
(kurecolor-hex-to-rgba "#FFFFFFFF")
 ⇒ '(1.0 1.0 1.0 1.0)
(kurecolor-hex-to-rgba "#72009172")
 ⇒ '(0.44715 0.0 0.5686 0.4471)
#+end_example


#+begin_example
(kurecolor-hex-to-hsv "#347291")
 ⇒ '(0.5556 0.6414 0.5686)
(kurecolor-hex-to-hsv "#729134")
 ⇒ '(0.2222 0.6414 0.5686)
(kurecolor-hex-to-hsv "#913472")
 ⇒ '(0.8889 0.6414 0.5686)
#+end_example


#+begin_example
(kurecolor-hsv-to-hex 0.556 0.65 0.5687)
 ⇒ "#327191"
(kurecolor-hsv-to-hex 1.0 0.7 1.0)
 ⇒ "#FF4C4C"
(kurecolor-hsv-to-hex 0.5 0.5 0.6)
 ⇒ "#4C9999"
#+end_example


* lsp-origami


#+begin_src emacs-lisp
(use-package origami
  :config (global-origami-mode))
#+end_src

#+RESULTS:

#+begin_src emacs-lisp
(use-package lsp-origami
  :hook ((lsp-after-open . lsp-origami-mode)))
#+end_src

#+RESULTS:
| lsp-origami-mode | doom-modeline-update-lsp |

#+begin_src emacs-lisp
;; (use-package lsp-origami
;;   :ensure t)

;; (add-hook 'lsp-after-open-hook #'lsp-origami-try-enable)
#+end_src

#+RESULTS:
| lsp-origami-try-enable | dap-ui--after-open | dap--after-open | doom-modeline-update-lsp |

* lsp-tailwindcss
https://github.com/merrickluo/lsp-tailwindcss
#+begin_src emacs-lisp
(use-package lsp-tailwindcss
  :init
  (setq lsp-tailwindcss-add-on-mode t))
#+end_src

#+RESULTS:
: t

* avy projectile
https://raw.githubusercontent.com/bbatsov/emacs.d/master/init.el
#+begin_src emacs-lisp
(use-package avy
  :ensure t
  :config (setq avy-background t))
#+end_src

#+begin_src emacs-lisp
(use-package projectile
  :ensure t
  :config
  (define-key projectile-mode-map (kbd "C-c C-p") 'projectile-command-map)
  (global-set-key (kbd "C-c p") 'projectile-command-map)
  (projectile-mode +1))
#+end_src

* python
#+begin_src emacs-lisp
  (use-package python-mode
    :ensure t
    :hook (python-mode . lsp-deferred)
    :custom
    ;; NOTE: Set these if Python 3 is called "python3" on your system!
    (python-shell-interpreter "python3")
    (dap-python-executable "python3")
    (dap-python-debugger 'debugpy)
    :config
    (require 'dap-python))
#+end_src

#+RESULTS:
| lsp-deferred | doom-modeline-env-setup-python |

#+begin_src emacs-lisp
(use-package pyvenv
  :ensure t
  :config (pyvenv-mode t)
  ;; Set correct Python interpreter
  (setq pyvenv-post-activate-hooks
        (list (lambda ()
                (setq python-shell-interpreter (concat pyvenv-virtual-env "bin/python3")))))
  (setq pyvenv-post-deactivate-hooks
        (list (lambda ()
                (setq python-shell-interpreter "python3")))))
#+end_src

#+RESULTS:

#+begin_src emacs-lisp
  (setq org-babel-python-command "python3")
  (setq org-babel-default-header-args:python
		'((:results . "output")
	  (:session . "none")
	  (:shebang . "#!/usr/bin/env python3")
	  (:flags  . "-i")))

#+end_src

#+RESULTS:
: ((:results . output) (:session . none) (:shebang . #!/usr/bin/env python3) (:flags . -i))

#+begin_src emacs-lisp
  (setq python-shell-completion-native-enable nil)
#+end_src

#+RESULTS:

#+begin_src emacs-lisp
;; active cet environnement virtuel par défaut
;;(pyvenv-activate "~/envirs/env02/")
#+end_src

#+RESULTS:

* typescript
#+begin_src emacs-lisp
(use-package typescript-mode
  :ensure t
  :mode "\\.ts\\'")
#+end_src
